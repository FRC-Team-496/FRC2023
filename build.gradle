plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2023.2.1"
    id "maven-publish"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

javadoc {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.runtimeClasspath
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false

repositories {
    maven { url 'https://nexus.otake.pw/repository/maven-public/' }
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
    implementation "edu.wpi.first.wpilibj:wpilibj-java:1.4.1"

    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

ext {
    jarToPublish = file( "pixy2-java-api.jar" )
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    baseName "pixy2-java-api"
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

task sourceJar(type: Jar, dependsOn: classes) {
	baseName "pixy2-java-api"
    classifier 'sources'
    from sourceSets.main.allSource
}
 
task javadocJar(type: Jar, dependsOn: javadoc) {
	baseName "pixy2-java-api"
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task replaceVersionInREADME {
    ant.replaceregexp(match:"pw.otake.pseudoresonance:pixy2-java-api:([0-9\\.]+)", replace:"pw.otake.pseudoresonance:pixy2-java-api:1.4.1", flags:'g', byline:true, encoding: 'UTF-8') {
        fileset(dir: '.', includes: 'README.md')
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
       	 	from components.java
        	artifact sourceJar
            artifact javadocJar
        	groupId = "pw.otake.pseudoresonance"
            artifactId = "pixy2-java-api"
            version = "1.4.1"
            pom {
                name = 'Pixy2JavaAPI'
                description = 'Java port of Pixy2 API for FIRST Robotics'
                url = 'https://github.com/PseudoResonance/Pixy2JavaAPI/'
                licenses {
                    license {
                        name = 'GNU General Public License, version 2'
                        url = 'http://www.gnu.org/licenses/gpl-2.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'PseudoResonance'
                        name = 'Josh Otake'
                        email = 'kaio11602@gmail.com'
                    }
                }
            }
        }
    }
    repositories {
        maven {
       	 	def releasesRepoUrl = "http://192.168.0.20:4540/repository/maven-releases/"
            def snapshotsRepoUrl = "http://192.168.0.20:4540/repository/maven-snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.hasProperty('nexus_username') ? nexus_username : (System.getenv('NEXUS_USERNAME') != null ? System.getenv('NEXUS_USERNAME') : '')
                password = project.hasProperty('nexus_password') ? nexus_password : (System.getenv('NEXUS_PASSWORD') != null ? System.getenv('NEXUS_PASSWORD') : '')
            }
        }
    }
}
